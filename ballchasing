#include <IRsensor.h>
#include <moving_average.h>
#include "math.h"
#include "Arduino.h"
#define IR_NUM 8
//モータPIN番号(ハード依存)
#define M1a 4
#define M1b 5
#define M1P 9
#define M2a 6
#define M2b 7
#define M2P 10
#define M3a 8
#define M3b 9
#define M3P 17
#define Sbutton 12

int val = 0; // 入力ピンの状態を記憶しておく用
int old_val = 0; // 前回の入力ピンの状態を記憶
int state = 0; // LEDの状態（0ならオフ、1ならオン）
int kakudo;                 // ボールの角度
int power1;             // 
int power2;
int power3;
int power4;
int x1a; //モータHIGH or LOW
int x1b;
int x2a;
int x2b;
int x3a;
int x3b;
int x4a;
int x4b;
// RoboCupJunior IR Ball waveform MODE-A T=833[us]
// https://www.elekit.co.jp/pdf/RCJ-05%20waveform_j.pdf
#define T_MODEA 833

MovingAverage smaForRadius(20);
MovingAverage smaForTheta(20);

unsigned long time_ms = 0;

void setup() {
    Serial.begin(115200);
    setAllSensorPinsInput();
      pinMode(Sbutton, INPUT);
}

void loop() {
 val = digitalRead(Sbutton);

  if ((val == HIGH) && (old_val == LOW)) {
    state = 1 - state;
    delay(50); // バウンシング解消用の遅延
  }
  old_val = val;
  Serial.print(val);
  Serial.print("\n");
  
    float           pulseWidth[IR_NUM]; // パルス幅を格納する変数
    sensorInfo_t    sensorInfo;         // 実験用の測定データ ベクトルのみ使う場合は無視することも可能
    vectorXY_t      vectorXY;           // 直交座標系のベクトル構造体
    vectorRT_t      vectorRT;           // 極座標系のベクトル構造体
    vectorRT_t      vectorRTWithSma;    // 移動平均を適用させた極座標系ベクトル

    sensorInfo  = getAllSensorPulseWidth(pulseWidth, T_MODEA);
    vectorXY    = calcVectorXYFromPulseWidth(pulseWidth);
    vectorRT    = calcRTfromXY(&vectorXY);

    vectorRTWithSma.theta   = smaForTheta.updateData(vectorRT.theta);
    vectorRTWithSma.radius  = smaForRadius.updateData(vectorRT.radius);

    // 50ms周期でシリアルプリント
    if (millis() - time_ms > 50) {
        time_ms = millis();
        
        serialPrintAllPusleWidth(pulseWidth, &sensorInfo);
        Serial.print("\t");
        Serial.print("\n");
    }

      switch (sensorInfo.maxSensorNumber){
      case 1: (sensorInfo.maxSensorNumber == 1);
           kakudo = 0;
              power1 = sin((kakudo - 45 - 10) * M_PI / 180);
              power2 = sin((kakudo - 135 - 10) * M_PI / 180);
              power3 = sin((kakudo - 225 - 10) * M_PI / 180);
              power4 = sin((kakudo - 315 - 10) * M_PI / 180);
      case 2: (sensorInfo.maxSensorNumber == 2);
           kakudo = 45;
              power1 = sin((kakudo - 45 - 10) * M_PI / 180);
              power2 = sin((kakudo - 135 - 10) * M_PI / 180);
              power3 = sin((kakudo - 225 - 10) * M_PI / 180);
              power4 = sin((kakudo - 315 - 10) * M_PI / 180);
      case 3: (sensorInfo.maxSensorNumber == 3);
           kakudo = 90;
              power1 = sin((kakudo - 45 - 10) * M_PI / 180);
              power2 = sin((kakudo - 135 - 10) * M_PI / 180);
              power3 = sin((kakudo - 225 - 10) * M_PI / 180);
              power4 = sin((kakudo - 315 - 10) * M_PI / 180);
      case 4: (sensorInfo.maxSensorNumber == 4); 
           kakudo = 135;
              power1 = sin((kakudo - 45 - 10) * M_PI / 180);
              power2 = sin((kakudo - 135 - 10) * M_PI / 180);
              power3 = sin((kakudo - 225 - 10) * M_PI / 180);
              power4 = sin((kakudo - 315 - 10) * M_PI / 180);
      case 5: (sensorInfo.maxSensorNumber == 5);
           kakudo = 180;
              power1 = sin((kakudo - 45 - 10) * M_PI / 180);
              power2 = sin((kakudo - 135 - 10) * M_PI / 180);
              power3 = sin((kakudo - 225 - 10) * M_PI / 180);
              power4 = sin((kakudo - 315 - 10) * M_PI / 180);
      case 6: (sensorInfo.maxSensorNumber == 6);
           kakudo = 225;
             power1 = sin((kakudo - 45 - 10) * M_PI / 180);
              power2 = sin((kakudo - 135 - 10) * M_PI / 180);
              power3 = sin((kakudo - 225 - 10) * M_PI / 180);
              power4 = sin((kakudo - 315 - 10) * M_PI / 180);
       case 7: (sensorInfo.maxSensorNumber == 7);
          kakudo = 270;
              power1 = sin((kakudo - 45 - 10) * M_PI / 180);
              power2 = sin((kakudo - 135 - 10) * M_PI / 180);
              power3 = sin((kakudo - 225 - 10) * M_PI / 180);
              power4 = sin((kakudo - 315 - 10) * M_PI / 180);
       case 8: (sensorInfo.maxSensorNumber == 8);
          kakudo = 315;
              power1 = sin((kakudo - 45 - 10) * M_PI / 180);
              power2 = sin((kakudo - 135 - 10) * M_PI / 180);
              power3 = sin((kakudo - 225 - 10) * M_PI / 180);
              power4 = sin((kakudo - 315 - 10) * M_PI / 180);
 }


  if (power1 == 0) {
      x1a == 0;
      x1b == 0;
   }else if (sensorInfo.maxSensorNumber > 1&& sensorInfo.maxSensorNumber < 3) {
      x1a == 0;
      x1b == power1;
   }else if (sensorInfo.maxSensorNumber == 3) {
      x1a == power1;
      x1b == 0;
        }
    else if (sensorInfo.maxSensorNumber > 3 && sensorInfo.maxSensorNumber < 5) {
      x1a == power1;
      x1b == 0;
        }
    else if (sensorInfo.maxSensorNumber > 5 && sensorInfo.maxSensorNumber <= 7) {
      x1a == 0;
      x1b == power1;
        }
    else if (sensorInfo.maxSensorNumber >= 7 && sensorInfo.maxSensorNumber < 1) {
      x1a == 0;
      x1b == power1;
        }

    if (power2 == 0) {
      x2a == 0;
      x2b == 0;
         }
    else if (sensorInfo.maxSensorNumber > 1 && sensorInfo.maxSensorNumber < 3) {
      x2a == 0;
      x2b == power2;
         }
    else if (sensorInfo.maxSensorNumber == 3) {
      x2a == 0;
      x2b == power2;
        }
    else if (sensorInfo.maxSensorNumber > 3 && sensorInfo.maxSensorNumber < 5) {
      x2a == power2;
      x2b == 0;
       }
    else if (sensorInfo.maxSensorNumber > 5 && sensorInfo.maxSensorNumber <= 7) {
      x2a == power2;
      x2b == 0;
         }
    else if (sensorInfo.maxSensorNumber >= 7 && sensorInfo.maxSensorNumber < 1) {
      x2a == power2;
      x2b == 0;
        }

   if (power3 == 0) {
      x3a == 0;
      x3b == 0;
    }
    else if (sensorInfo.maxSensorNumber > 1 && sensorInfo.maxSensorNumber < 3) {
      x3a == 0;
      x3b == power3;
    }
    else if (sensorInfo.maxSensorNumber == 3) {
      x3a == 0;
      x3b == power3;
    }
    else if (sensorInfo.maxSensorNumber > 3 && sensorInfo.maxSensorNumber < 5) {
      x3a == 0;
      x3b == power3;
    }
    else if (sensorInfo.maxSensorNumber > 5 && sensorInfo.maxSensorNumber <= 7) {
      x3a == power3;
      x3b == 0;
    }
    else if (sensorInfo.maxSensorNumber >= 7 && sensorInfo.maxSensorNumber < 1) {
      x3a == power3;
      x3b == 0;
    }
    
 if (power4 == 0) {
      x4a == 0;
      x4b == 0;
    }
    else if (sensorInfo.maxSensorNumber > 1 && sensorInfo.maxSensorNumber < 3) {
      x4a == 0;
      x4b == power4;
    }
    else if (sensorInfo.maxSensorNumber == 3) {
      x4a == power4;
      x4b == 0;
    }
    else if (sensorInfo.maxSensorNumber > 3 && sensorInfo.maxSensorNumber < 5) {
      x4a == 0;
      x4b == power4;
    }
    else if (sensorInfo.maxSensorNumber > 5 && sensorInfo.maxSensorNumber <= 7) {
      x4a == 0;
      x4b == power4;
    }
    else if (sensorInfo.maxSensorNumber >= 7 && sensorInfo.maxSensorNumber < 1) {
      x4a == 0;
      x4b == power4;
    }
    

 if (state == 1) {
    while (sensorInfo.activeSensors >= 1) {
      analogWrite(M1a, x1a);
      analogWrite(M1b, x1b);
      analogWrite(M2a, x2a);
      analogWrite(M2b, x2b);
      analogWrite(M3a, x3a);
      analogWrite(M3b, x3b);
      analogWrite(M4a, x4a);
      analogWrite(M4b, x4b);

      delay(10);
  }
 }
}


void serialPrintAllPusleWidth(float *pulseWidth, sensorInfo_t *infop) {
    for(int i = 0; i < IR_NUM; i++) {
        Serial.print(pulseWidth[i]); 
        Serial.print("\t");
    }
    Serial.print(infop->activeSensors); 
    Serial.print("\t");
    Serial.print(infop->maxSensorNumber);
    Serial.print("\t");
    Serial.print(infop->maxPulseWidth); 
}
